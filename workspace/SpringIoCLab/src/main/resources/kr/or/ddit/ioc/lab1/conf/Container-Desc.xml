<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

<!-- 	스프링 DI[IoC, Bean] container 사용단계
	1. spring-context 의존성, pom.xml
	2. Spring Bean Configuration file[bean metadata file] 생성
	3. 컨테이너에 의해 생명주기가 관리된 객체[Bean] 등록
		스프링 컨테이너란? bean[객체]의 생명주기 관리자.
	4. 등록된 빈들간의 의존관계 형성(dependency injection)
		1) constructor injection (required)
		2) setter injection (optional)
	5. 어플리케이션의 entry point 에서 컨테이너 객체를 생성.
	6. 컨테이너를 통해 필요 빈 주입 받아 사용. -->
	
	<bean id="mariaDAO" class="kr.or.ddit.ioc.lab1.dao.SampleDAOImpl_MariaDB" />
	<bean id="sampleService_CI" class="kr.or.ddit.ioc.lab1.service.SampleServiceImpl">
		<constructor-arg name="dao">
			<bean class="kr.or.ddit.ioc.lab1.dao.SampleDAOImpl_Oracle"></bean>
		</constructor-arg>
	</bean>
	<bean id="sampleService_SI" class="kr.or.ddit.ioc.lab1.service.SampleServiceImpl">
		<property name="dao" ref="mariaDAO" />
	</bean>
	
<!-- 	
	스프링 컨테이너의 빈 관리 특성
	1. 특별한 설정(scope)이 없는 한 등록된 빈을 singleton 형태로 관리함. 
		하나의 빈으로 등록된 객체가 하나 -> singleton
		하나의 빈에 대해 주입시마다 새로운 객체가 생성되는 구조 -> prototype
	2. 특별한 설정이 없는 한 컨테이너는 등록된 빈들이 일시에 한꺼번에 초기화시킴 
-->
</beans>
